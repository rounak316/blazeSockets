/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.proxy.proto.models.GameEvent', null, global);
goog.exportSymbol('proto.proxy.proto.models.GameEventType', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.proxy.proto.models.GameEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.proxy.proto.models.GameEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.proxy.proto.models.GameEvent.displayName = 'proto.proxy.proto.models.GameEvent';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.proxy.proto.models.GameEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.proxy.proto.models.GameEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.proxy.proto.models.GameEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proxy.proto.models.GameEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    gameeventtype: jspb.Message.getFieldWithDefault(msg, 1, 0),
    messsage: msg.getMesssage_asB64(),
    name: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.proxy.proto.models.GameEvent}
 */
proto.proxy.proto.models.GameEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.proxy.proto.models.GameEvent;
  return proto.proxy.proto.models.GameEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.proxy.proto.models.GameEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.proxy.proto.models.GameEvent}
 */
proto.proxy.proto.models.GameEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {!proto.proxy.proto.models.GameEventType} */ (reader.readEnum());
      msg.setGameeventtype(value);
      break;
    case 3:
      var value = /** @type {!Uint8Array} */ (reader.readBytes());
      msg.setMesssage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.proxy.proto.models.GameEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.proxy.proto.models.GameEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.proxy.proto.models.GameEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.proxy.proto.models.GameEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGameeventtype();
  if (f !== 0.0) {
    writer.writeEnum(
      1,
      f
    );
  }
  f = message.getMesssage_asU8();
  if (f.length > 0) {
    writer.writeBytes(
      3,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional GameEventType gameEventType = 1;
 * @return {!proto.proxy.proto.models.GameEventType}
 */
proto.proxy.proto.models.GameEvent.prototype.getGameeventtype = function() {
  return /** @type {!proto.proxy.proto.models.GameEventType} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {!proto.proxy.proto.models.GameEventType} value */
proto.proxy.proto.models.GameEvent.prototype.setGameeventtype = function(value) {
  jspb.Message.setProto3EnumField(this, 1, value);
};


/**
 * optional bytes messsage = 3;
 * @return {!(string|Uint8Array)}
 */
proto.proxy.proto.models.GameEvent.prototype.getMesssage = function() {
  return /** @type {!(string|Uint8Array)} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * optional bytes messsage = 3;
 * This is a type-conversion wrapper around `getMesssage()`
 * @return {string}
 */
proto.proxy.proto.models.GameEvent.prototype.getMesssage_asB64 = function() {
  return /** @type {string} */ (jspb.Message.bytesAsB64(
      this.getMesssage()));
};


/**
 * optional bytes messsage = 3;
 * Note that Uint8Array is not supported on all browsers.
 * @see http://caniuse.com/Uint8Array
 * This is a type-conversion wrapper around `getMesssage()`
 * @return {!Uint8Array}
 */
proto.proxy.proto.models.GameEvent.prototype.getMesssage_asU8 = function() {
  return /** @type {!Uint8Array} */ (jspb.Message.bytesAsU8(
      this.getMesssage()));
};


/** @param {!(string|Uint8Array)} value */
proto.proxy.proto.models.GameEvent.prototype.setMesssage = function(value) {
  jspb.Message.setProto3BytesField(this, 3, value);
};


/**
 * optional string name = 4;
 * @return {string}
 */
proto.proxy.proto.models.GameEvent.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/** @param {string} value */
proto.proxy.proto.models.GameEvent.prototype.setName = function(value) {
  jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * @enum {number}
 */
proto.proxy.proto.models.GameEventType = {
  ROOM_CREATED_EVENT: 0,
  ROOM_JOINED_EVENT: 1,
  ROOM_LEFT_EVENT: 2,
  ROOM_DESTROYED_EVENT: 3,
  ROOM_FULL_EVENT: 4,
  GAME_PAUSED_EVENT: 5,
  GAME_RESUMED_EVENT: 6,
  GAME_CREATED_EVENT: 7,
  GAME_DESTROYED_EVENT: 8,
  GAME_FINISHED_EVENT: 9,
  GAME_STOPPED_EVENT: 10,
  GAME_MESSAGE_EVENT: 11,
  SOCKET_SERVER_PING: 12,
  SOCKET_SERVER_PONG: 13
};

goog.object.extend(exports, proto.proxy.proto.models);
